{"version":3,"sources":["domains/general/modules/puzzle/index.jsx"],"names":["Index","props","useState","content","setContent","src","partsX","partsY","precision","isFinished","settings","setSettings","Puzzle","elements","setElements","config","y","Array","x","minMax","top","min","max","left","Math","round","random","console","log","status","element","alt","draggable","style","position","display","maxHeight","maxWidth","zIndex","clipPath","onDragStart","e","preventDefault","onLoad","ev","target","addEventListener","onClick","removeEventListener","item","currentTarget","shiftX","clientWidth","shiftY","clientHeight","moveAt","currentX","currentY","posX","posY","updateElementStatus","onMouseMove","event","clientX","clientY","document","onMouseUp","values","getElement","summa","this","sqrt","getPrecision","get","map","el","pos","value","result","length","setPassed","callback","useEffect"],"mappings":"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","file":"static/js/2.9c1c8092.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react'\r\n\r\nconst Index = (props) => {\r\n    const settingsDefault = {\r\n        src: 'https://allods.mail.ru/media/originals/5fca168ceae6e.jpg',\r\n        partsX: 10,\r\n        partsY: 5,\r\n        precision: 1,\r\n        isFinished: false\r\n    }\r\n    const [content, setContent] = useState(null)\r\n    const [settings, setSettings] = useState(settingsDefault)\r\n\r\n    const Puzzle = {\r\n        elements: [],\r\n        setElements: function (config = settings) {\r\n            for (let y = 0; y < config.partsY; y++) {\r\n                this.elements[y] = new Array()\r\n                for (let x = 0; x < config.partsX; x++) {\r\n                    const minMax = {\r\n                        top: {\r\n                            min: - y*100/config.partsY,\r\n                            max: 100 - (y+1)*100/config.partsY\r\n                        },\r\n                        left: {\r\n                            min: - x*100/config.partsX,\r\n                            max: 100 - (x+1)*100/config.partsX\r\n                        }\r\n                    }\r\n                    let top = Math.round(minMax.top.min + Math.random() * (minMax.top.max - minMax.top.min)) + '%'    // .5*Math.random()*100 + '%'\r\n                    let left =  Math.round(minMax.left.min + Math.random() * (minMax.left.max - minMax.left.min)) + '%'\r\n                    console.log(top, left, minMax)\r\n                    this.elements[y] = [...this.elements[y],\r\n                        {\r\n                            status: false,\r\n                            element:\r\n                                <img\r\n                                    key={`${y}/${x}`}\r\n                                    src={settings.src}\r\n                                    alt={`Image content error ${y}/${x}`}\r\n                                    draggable={false}\r\n                                    style={{\r\n                                        position: 'absolute',\r\n                                        display: 'block',\r\n                                        top: top,\r\n                                        left: left,\r\n                                        maxHeight: '100%',\r\n                                        maxWidth: '100%',\r\n                                        zIndex: 0,\r\n                                        clipPath: `polygon(${x * 100 / config.partsX}% ${y * 100 / config.partsY}%, ${(x + 1) * 100 / config.partsX}% ${y * 100 / config.partsY}%, ${(x + 1) * 100 / config.partsX}% ${(y + 1) * 100 / config.partsY}%, ${x * 100 / config.partsX}% ${(y + 1) * 100 / config.partsY}%)`\r\n                                    }}\r\n                                    onDragStart={e => { e.preventDefault() }}\r\n                                    onLoad={ev => {\r\n                                        const onClick = (e) => {\r\n                                            ev.target.removeEventListener('mousedown', onClick)\r\n                                            const item = e.currentTarget\r\n                                            item.style.zIndex++\r\n\r\n                                            const shiftX = e.currentTarget.clientWidth * (x + .5) / config.partsX\r\n                                            const shiftY = e.currentTarget.clientHeight * (y + .5) / config.partsY\r\n\r\n                                            const moveAt = (currentX, currentY) => {\r\n                                                const posX = currentX - shiftX\r\n                                                const posY = currentY - shiftY\r\n                                                item.style.left = posX + 'px'\r\n                                                item.style.top = posY + 'px'\r\n                                                return {x: posX, y: posY}\r\n                                            }\r\n                                            Puzzle.updateElementStatus([y,x], false)\r\n\r\n                                            const onMouseMove = event => {\r\n                                                moveAt(event.clientX, event.clientY)\r\n                                            }\r\n                                            const onMouseUp = event => {\r\n                                                item.style.zIndex--\r\n                                                const values = {\r\n                                                    element: {\r\n                                                        x: event.clientX - shiftX,\r\n                                                        y: event.clientY - shiftY\r\n                                                    },\r\n                                                    precision: {\r\n                                                        x: .5*event.target.clientWidth/config.partsX * config.precision,\r\n                                                        y: .5*event.target.clientHeight/config.partsY * config.precision\r\n                                                    },\r\n                                                    getElement: function () {\r\n                                                        const summa = this.element.x*this.element.x + this.element.y*this.element.y\r\n                                                        return Math.sqrt(summa)\r\n                                                    },\r\n                                                    getPrecision: function () {\r\n                                                        const summa = this.precision.x*this.precision.x + this.precision.y*this.precision.y\r\n                                                        return Math.sqrt(summa)\r\n                                                    }\r\n                                                }\r\n                                                if (values.getElement() <= values.getPrecision()) {\r\n                                                    const posX = (x + .5)*event.target.clientWidth/config.partsX\r\n                                                    const posY = (y + .5)*event.target.clientHeight/config.partsY\r\n                                                    moveAt(posX, posY)\r\n                                                    this.updateElementStatus([y,x], true)\r\n                                                }\r\n                                                document.removeEventListener('mousemove', onMouseMove)\r\n                                                document.removeEventListener('mouseup', onMouseUp)\r\n                                                ev.target.addEventListener('mousedown', onClick)\r\n                                            }\r\n\r\n                                            document.addEventListener('mousemove', onMouseMove)\r\n                                            document.addEventListener('mouseup', onMouseUp)\r\n                                        }\r\n                                        ev.target.addEventListener('mousedown', onClick)\r\n                                    }}\r\n                                />\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        },\r\n        get: function () {\r\n            return this.elements.map(e => e.map(el => el.element))\r\n        },\r\n        updateElementStatus: function (pos, value) {\r\n            this.elements[pos[0]][pos[1]] = {\r\n                ...this.elements[pos[0]][pos[1]],\r\n                status: value\r\n            }\r\n            let result = true\r\n            for (let y = 0; y < this.elements.length; y++) {\r\n                for (let x = 0; x < this.elements[y].length; x++) {\r\n                    if (this.elements[y][x].status===false) { result = false }\r\n                }\r\n            }\r\n            if (result) {\r\n               this.setPassed()\r\n            }\r\n        },\r\n        setPassed: function () {\r\n            const element = <img\r\n                src={settings.src}\r\n                alt={'Image content error'}\r\n                style={{\r\n                    maxHeight: '100%',\r\n                    maxWidth: '100%'\r\n                }}\r\n            />\r\n            setContent(element)\r\n            settings.callback && settings.callback()\r\n        }\r\n    }\r\n\r\n    // Puzzle.setElements()\r\n    useEffect(() => {\r\n        setSettings({...settings, ...props.settings})\r\n    }, [props])\r\n    useEffect(() => {\r\n        if (settings.isFinished) {\r\n            Puzzle.setPassed()\r\n        } else {\r\n            Puzzle.setElements(settings)\r\n            setContent(Puzzle.get())\r\n        }\r\n    }, [settings])\r\n\r\n    return (\r\n        <div style={{maxHeight:'inherit', maxWidth:'inherit'}}>\r\n            {content}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Index"],"sourceRoot":""}